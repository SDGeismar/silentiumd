// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package silentiumv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SilentiumServiceClient is the client API for SilentiumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SilentiumServiceClient interface {
	GetBlockScalars(ctx context.Context, in *GetBlockScalarsRequest, opts ...grpc.CallOption) (*GetBlockScalarsResponse, error)
	GetBlockFilter(ctx context.Context, in *GetBlockFilterRequest, opts ...grpc.CallOption) (*GetBlockFilterResponse, error)
	GetChainTipHeight(ctx context.Context, in *GetChainTipHeightRequest, opts ...grpc.CallOption) (*GetChainTipHeightResponse, error)
}

type silentiumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSilentiumServiceClient(cc grpc.ClientConnInterface) SilentiumServiceClient {
	return &silentiumServiceClient{cc}
}

func (c *silentiumServiceClient) GetBlockScalars(ctx context.Context, in *GetBlockScalarsRequest, opts ...grpc.CallOption) (*GetBlockScalarsResponse, error) {
	out := new(GetBlockScalarsResponse)
	err := c.cc.Invoke(ctx, "/silentium.v1.SilentiumService/GetBlockScalars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *silentiumServiceClient) GetBlockFilter(ctx context.Context, in *GetBlockFilterRequest, opts ...grpc.CallOption) (*GetBlockFilterResponse, error) {
	out := new(GetBlockFilterResponse)
	err := c.cc.Invoke(ctx, "/silentium.v1.SilentiumService/GetBlockFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *silentiumServiceClient) GetChainTipHeight(ctx context.Context, in *GetChainTipHeightRequest, opts ...grpc.CallOption) (*GetChainTipHeightResponse, error) {
	out := new(GetChainTipHeightResponse)
	err := c.cc.Invoke(ctx, "/silentium.v1.SilentiumService/GetChainTipHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SilentiumServiceServer is the server API for SilentiumService service.
// All implementations should embed UnimplementedSilentiumServiceServer
// for forward compatibility
type SilentiumServiceServer interface {
	GetBlockScalars(context.Context, *GetBlockScalarsRequest) (*GetBlockScalarsResponse, error)
	GetBlockFilter(context.Context, *GetBlockFilterRequest) (*GetBlockFilterResponse, error)
	GetChainTipHeight(context.Context, *GetChainTipHeightRequest) (*GetChainTipHeightResponse, error)
}

// UnimplementedSilentiumServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSilentiumServiceServer struct {
}

func (UnimplementedSilentiumServiceServer) GetBlockScalars(context.Context, *GetBlockScalarsRequest) (*GetBlockScalarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockScalars not implemented")
}
func (UnimplementedSilentiumServiceServer) GetBlockFilter(context.Context, *GetBlockFilterRequest) (*GetBlockFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockFilter not implemented")
}
func (UnimplementedSilentiumServiceServer) GetChainTipHeight(context.Context, *GetChainTipHeightRequest) (*GetChainTipHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainTipHeight not implemented")
}

// UnsafeSilentiumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SilentiumServiceServer will
// result in compilation errors.
type UnsafeSilentiumServiceServer interface {
	mustEmbedUnimplementedSilentiumServiceServer()
}

func RegisterSilentiumServiceServer(s grpc.ServiceRegistrar, srv SilentiumServiceServer) {
	s.RegisterService(&SilentiumService_ServiceDesc, srv)
}

func _SilentiumService_GetBlockScalars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockScalarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SilentiumServiceServer).GetBlockScalars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/silentium.v1.SilentiumService/GetBlockScalars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SilentiumServiceServer).GetBlockScalars(ctx, req.(*GetBlockScalarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SilentiumService_GetBlockFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SilentiumServiceServer).GetBlockFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/silentium.v1.SilentiumService/GetBlockFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SilentiumServiceServer).GetBlockFilter(ctx, req.(*GetBlockFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SilentiumService_GetChainTipHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainTipHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SilentiumServiceServer).GetChainTipHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/silentium.v1.SilentiumService/GetChainTipHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SilentiumServiceServer).GetChainTipHeight(ctx, req.(*GetChainTipHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SilentiumService_ServiceDesc is the grpc.ServiceDesc for SilentiumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SilentiumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "silentium.v1.SilentiumService",
	HandlerType: (*SilentiumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockScalars",
			Handler:    _SilentiumService_GetBlockScalars_Handler,
		},
		{
			MethodName: "GetBlockFilter",
			Handler:    _SilentiumService_GetBlockFilter_Handler,
		},
		{
			MethodName: "GetChainTipHeight",
			Handler:    _SilentiumService_GetChainTipHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "silentium/v1/silentium.proto",
}
